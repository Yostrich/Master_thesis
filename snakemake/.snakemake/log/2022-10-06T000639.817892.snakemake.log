Building DAG of jobs...
Using shell: /usr/bin/bash
Provided cores: 1 (use --cores to define parallelism)
Rules claiming more threads will be scaled down.
Conda environments: ignored
Job stats:
job                    count    min threads    max threads
-------------------  -------  -------------  -------------
all                        1              1              1
getEnrichmentRatios        1              1              1
total                      2              1              1

Select jobs to execute...

[Thu Oct  6 00:06:40 2022]
rule getEnrichmentRatios:
    input: LUZ7_peak_calling/LUZ7_enriched_t5.5end.plus.peaks.oracle.narrowPeak.counts.clustered.csv, LUZ7_peak_calling/LUZ7_control_t5.5end.plus.peaks.oracle.narrowPeak.counts.clustered.csv
    output: TSS_LUZ7_t5/enrRatios_LUZ7_t5.plus.csv
    jobid: 1
    reason: Missing output files: TSS_LUZ7_t5/enrRatios_LUZ7_t5.plus.csv
    wildcards: phage=LUZ7, ident=t5, sign=plus
    resources: tmpdir=/tmp

RuleException in rule getEnrichmentRatios in line 1 of /mnt/c/Users/danis/Desktop/Thesis/pipeline_snakemake/workflow/rules/annotateTSS.smk:
NameError: The name 'print $14' is unknown in this context. Please make sure that you defined that variable. Also note that braces not used for variable access have to be escaped by repeating them, i.e. {{print $1}}, when formatting the following:

        ePeaks=$(awk -F ',' '{print $14}' {input.enriched}| awk 'NR>1')
        cPeaks=$(awk -F ',' '{print $14}' {input.control}| awk 'NR>1')
        commonPeaks=$(grep -Fx -f <(echo "$ePeaks") <(echo "$cPeaks"))
        AllPeaks=$(paste -d ' ' <(echo "$commonPeaks") <(echo "$commonPeaks"))
        remainingPeaks=$(grep -Fxv -f <(echo "$commonPeaks") <(echo "$cPeaks"))
        for i in $(seq 1 {params.error})
        do
            cPeaksPlus=$(awk -v e="$i" -F ',' '{print $1+e}' <(echo "$remainingPeaks"))
            commonPeaksPlus=$(grep -Fx -f <(echo "$ePeaks") <(echo "$cPeaksPlus"))
            if [[ -n $commonPeaksPlus ]]
            then
                originalPlus=$(awk -v e=$i -F ',' '{print $1-e}' <(echo "$commonPeaksPlus"))
                #echo "$originalPlus"
                remainingPeaks=$(grep -Fxv -f <(echo "$originalPlus") <(echo "$remainingPeaks"))
                AllPeaksPlus=$(paste -d ' ' <(echo "$originalPlus") <(echo "$commonPeaksPlus"))
                AllPeaks=$(cat <(echo "$AllPeaks") <(echo "$AllPeaksPlus"))
            fi
            
            cPeaksMinus=$(awk -v e="$i" -F ',' '{print $1-e}' <(echo "$remainingPeaks"))
            commonPeaksMinus=$(grep -Fx -f <(echo "$ePeaks") <(echo "$cPeaksMinus"))
            if [[ -n $commonPeaksMinus ]]
            then
                originalMinus=$(awk -v e=$i -F ',' '{print $1+e}' <(echo "$commonPeaksMinus"))
                remainingPeaks=$(grep -Fxv -f <(echo "$originalMinus") <(echo "$remainingPeaks"))
                AllPeaksMinus=$(paste -d ' ' <(echo "$originalMinus") <(echo "$commonPeaksMinus"))
                AllPeaks=$(cat <(echo "$AllPeaks") <(echo "$AllPeaksMinus"))
            fi
        done
        commonEnriched=$(awk '{ print $2 }' <(echo "$AllPeaks") |        xargs -I {} awk -F "," '$14 == {} {print $1, $2, $3, $14, $5, $17, $18}' {input.enriched})
        commonControl=$(awk '{ print $1 }' <(echo "$AllPeaks") |        xargs -I {} awk -F "," '$14 == {} {print $1, $2, $3, $14, $5, $17, $18}' {input.control})
        NControlPeaks=$(echo "$commonControl" | wc -l)
        NEnrichedPeaks=$(echo "$commonEnriched" | wc -l)
        minNPeaks=$(( $NControlPeaks > $NEnrichedPeaks ? $NControlPeaks : $NEnrichedPeaks ))
        
        #check if both have any peaks
        if [[ $minNPeaks > 1 ]]
        then
            #put information in one output.
            paste -d ' ' <(echo "$commonEnriched") <(echo "$commonControl") |            awk '{print $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $7/$14}' |            sort -g -k 2,2 | awk -v t=$Threshold -F " " '$15 > t {print }' > {output}
        fi
        
